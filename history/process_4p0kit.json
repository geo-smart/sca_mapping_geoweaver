[{
  "history_id" : "uOgjXFrj57Tq",
  "history_input" : "\nimport os\nimport pandas as pd\nfrom functions_book_chapter_SCA import *\n\nhome_directory = os.path.expanduser('~')\nprint(\"Home Directory:\", home_directory)\n# prepare data \ndata = pd.read_csv(f'{home_directory}/data/samples/sample_10K.csv', index_col = False)\nprint(\"Sample dimentions:\".format(), data.shape)\ndata.head()\nX = data[['blue','green','red','nir']]\ny = data['label']\n\n# customize models with different sample sizes\nmodels = get_models_size()\nresults, names = list(), list()\nfor name, model in models.items():\n    # evaluate models using k-fold cross-validation\n    scores = evaluate_model(model, X, y)\n    results.append(scores)\n    names.append(name)\n    # print the mean and standard deviation of models \n    print('>%s   Mean Score: %.6f (Score SD: %.6f)' % ('Sample size: ' + str(int(float(name) * 10000)), scores.mean(), scores.std()))\n    \n# display model performance \nplt.figure(figsize=(10,5))\nplt.boxplot(results, labels=names, showmeans=True)\nplt.show()\n\n# customize models with different model feature sizes\nmodels = get_models_feature()\n# evaluate the models and store results\nresults, names = list(), list()\nfor name, model in models.items():\n    # evaluate models using k-fold cross-validation\n    scores = evaluate_model(model, X, y)\n    results.append(scores)\n    names.append(name)\n    # print the mean and standard deviation of models \n    # print('>%s %.3f (%.3f)' % (name, scores.mean(), scores.std()))\n    print('>%s   Mean Score: %.6f (Score SD: %.6f)' % ('Features: ' + name, scores.mean(), scores.std()))\n# display model performance \nplt.boxplot(results, labels=names, showmeans=True)\nplt.show()\n\n# customize models with different tree numbers\nmodels = get_models_tree()\n# evaluate the models and store results\nresults, names = list(), list()\nfor name, model in models.items():\n    # evaluate models using k-fold cross-validation\n    scores = evaluate_model(model, X, y)\n    results.append(scores)\n    names.append(name)\n    # print the mean and standard deviation of models \n    # print('>%s %.3f (%.3f)' % (name, scores.mean(), scores.std()))\n    print('>%s   Mean Score: %.6f (Score SD: %.6f)' % ('Tree numbers: ' + name, scores.mean(), scores.std()))\n# display model performance \nplt.boxplot(results, labels=names, showmeans=True)\nplt.show()\n\n# customize models with different tree depths\nmodels = get_models_depth()\n# evaluate the models and store results\nresults, names = list(), list()\nfor name, model in models.items():\n     # evaluate models using k-fold cross-validation\n    scores = evaluate_model(model, X, y)\n    results.append(scores)\n    names.append(name)\n    # print the mean and standard deviation of models \n    # print('>%s %.3f (%.3f)' % (name, scores.mean(), scores.std()))\n    print('>%s   Mean Score: %.6f (Score SD: %.6f)' % ('Tree Depth: ' + name, scores.mean(), scores.std()))\n# display model performance \nplt.figure(figsize=(10,5))\nplt.boxplot(results, labels=names, showmeans=True)\nplt.show()",
  "history_output" : "Home Directory: /Users/joe\nSample dimentions: (10000, 5)\n>Sample size: 100   Mean Score: 0.997149 (Score SD: 0.001636)\n>Sample size: 200   Mean Score: 0.997613 (Score SD: 0.001482)\n>Sample size: 300   Mean Score: 0.997777 (Score SD: 0.001417)\n>Sample size: 400   Mean Score: 0.997919 (Score SD: 0.001378)\n>Sample size: 500   Mean Score: 0.998051 (Score SD: 0.001347)\n>Sample size: 600   Mean Score: 0.998204 (Score SD: 0.001313)\n>Sample size: 700   Mean Score: 0.998320 (Score SD: 0.001260)\n>Sample size: 800   Mean Score: 0.998400 (Score SD: 0.001240)\n>Sample size: 900   Mean Score: 0.998444 (Score SD: 0.001218)\n>Sample size: 1000   Mean Score: 0.998480 (Score SD: 0.001194)\n>Sample size: 2000   Mean Score: 0.998520 (Score SD: 0.001173)\n>Sample size: 3000   Mean Score: 0.998615 (Score SD: 0.001153)\n>Sample size: 4000   Mean Score: 0.998704 (Score SD: 0.001129)\n>Sample size: 5000   Mean Score: 0.998728 (Score SD: 0.001119)\n>Sample size: 6000   Mean Score: 0.998708 (Score SD: 0.001117)\n>Sample size: 7000   Mean Score: 0.998723 (Score SD: 0.001115)\n>Sample size: 8000   Mean Score: 0.998719 (Score SD: 0.001133)\n>Sample size: 9000   Mean Score: 0.998737 (Score SD: 0.001122)\n>Features: 1   Mean Score: 0.998768 (Score SD: 0.001098)\n>Features: 2   Mean Score: 0.998762 (Score SD: 0.001112)\n>Features: 3   Mean Score: 0.998797 (Score SD: 0.001106)\n>Features: 4   Mean Score: 0.998829 (Score SD: 0.001121)\n>Tree numbers: 1   Mean Score: 0.998219 (Score SD: 0.001349)\n>Tree numbers: 2   Mean Score: 0.998451 (Score SD: 0.001229)\n>Tree numbers: 3   Mean Score: 0.998616 (Score SD: 0.001157)\n>Tree numbers: 4   Mean Score: 0.998598 (Score SD: 0.001135)\n>Tree numbers: 5   Mean Score: 0.998685 (Score SD: 0.001170)\n>Tree numbers: 10   Mean Score: 0.998696 (Score SD: 0.001150)\n>Tree numbers: 20   Mean Score: 0.998729 (Score SD: 0.001129)\n>Tree numbers: 50   Mean Score: 0.998743 (Score SD: 0.001126)\n>Tree numbers: 100   Mean Score: 0.998762 (Score SD: 0.001111)\n>Tree numbers: 200   Mean Score: 0.998766 (Score SD: 0.001108)\n>Tree numbers: 800   Mean Score: 0.998777 (Score SD: 0.001106)\n>Tree numbers: 1000   Mean Score: 0.998771 (Score SD: 0.001107)\n>Tree Depth: 1   Mean Score: 0.998310 (Score SD: 0.001256)\n>Tree Depth: 2   Mean Score: 0.998483 (Score SD: 0.001192)\n>Tree Depth: 3   Mean Score: 0.998413 (Score SD: 0.001201)\n>Tree Depth: 4   Mean Score: 0.998486 (Score SD: 0.001170)\n>Tree Depth: 5   Mean Score: 0.998543 (Score SD: 0.001155)\n>Tree Depth: 6   Mean Score: 0.998603 (Score SD: 0.001169)\n>Tree Depth: 7   Mean Score: 0.998643 (Score SD: 0.001158)\n>Tree Depth: 8   Mean Score: 0.998695 (Score SD: 0.001135)\n>Tree Depth: 9   Mean Score: 0.998751 (Score SD: 0.001113)\n>Tree Depth: 10   Mean Score: 0.998764 (Score SD: 0.001122)\n>Tree Depth: 11   Mean Score: 0.998754 (Score SD: 0.001119)\n>Tree Depth: 12   Mean Score: 0.998757 (Score SD: 0.001105)\n>Tree Depth: 13   Mean Score: 0.998749 (Score SD: 0.001122)\n>Tree Depth: 14   Mean Score: 0.998757 (Score SD: 0.001115)\n>Tree Depth: 15   Mean Score: 0.998764 (Score SD: 0.001115)\n>Tree Depth: 16   Mean Score: 0.998757 (Score SD: 0.001119)\n>Tree Depth: 17   Mean Score: 0.998752 (Score SD: 0.001112)\n>Tree Depth: 18   Mean Score: 0.998758 (Score SD: 0.001100)\n>Tree Depth: 19   Mean Score: 0.998755 (Score SD: 0.001118)\n>Tree Depth: None   Mean Score: 0.998770 (Score SD: 0.001104)\n",
  "history_begin_time" : 1717477075531,
  "history_end_time" : 1717481077523,
  "history_notes" : null,
  "history_process" : "4p0kit",
  "host_id" : null,
  "indicator" : "Done"
},{
  "history_id" : "1dbEvBAoKDJz",
  "history_input" : "\nimport os\nimport pandas as pd\n\nhome_directory = os.path.expanduser('~')\nprint(\"Home Directory:\", home_directory)\n# prepare data \ndata = pd.read_csv(f'{home_directory}/data/samples/sample_10K.csv', index_col = False)\nprint(\"Sample dimentions:\".format(), data.shape)\ndata.head()\nX = data[['blue','green','red','nir']]\ny = data['label']\n\n# customize models with different sample sizes\nmodels = get_models_size()\nresults, names = list(), list()\nfor name, model in models.items():\n    # evaluate models using k-fold cross-validation\n    scores = evaluate_model(model, X, y)\n    results.append(scores)\n    names.append(name)\n    # print the mean and standard deviation of models \n    print('>%s   Mean Score: %.6f (Score SD: %.6f)' % ('Sample size: ' + str(int(float(name) * 10000)), scores.mean(), scores.std()))\n    \n# display model performance \nplt.figure(figsize=(10,5))\nplt.boxplot(results, labels=names, showmeans=True)\nplt.show()\n\n# customize models with different model feature sizes\nmodels = get_models_feature()\n# evaluate the models and store results\nresults, names = list(), list()\nfor name, model in models.items():\n    # evaluate models using k-fold cross-validation\n    scores = evaluate_model(model, X, y)\n    results.append(scores)\n    names.append(name)\n    # print the mean and standard deviation of models \n    # print('>%s %.3f (%.3f)' % (name, scores.mean(), scores.std()))\n    print('>%s   Mean Score: %.6f (Score SD: %.6f)' % ('Features: ' + name, scores.mean(), scores.std()))\n# display model performance \nplt.boxplot(results, labels=names, showmeans=True)\nplt.show()\n\n# customize models with different tree numbers\nmodels = get_models_tree()\n# evaluate the models and store results\nresults, names = list(), list()\nfor name, model in models.items():\n    # evaluate models using k-fold cross-validation\n    scores = evaluate_model(model, X, y)\n    results.append(scores)\n    names.append(name)\n    # print the mean and standard deviation of models \n    # print('>%s %.3f (%.3f)' % (name, scores.mean(), scores.std()))\n    print('>%s   Mean Score: %.6f (Score SD: %.6f)' % ('Tree numbers: ' + name, scores.mean(), scores.std()))\n# display model performance \nplt.boxplot(results, labels=names, showmeans=True)\nplt.show()\n\n# customize models with different tree depths\nmodels = get_models_depth()\n# evaluate the models and store results\nresults, names = list(), list()\nfor name, model in models.items():\n     # evaluate models using k-fold cross-validation\n    scores = evaluate_model(model, X, y)\n    results.append(scores)\n    names.append(name)\n    # print the mean and standard deviation of models \n    # print('>%s %.3f (%.3f)' % (name, scores.mean(), scores.std()))\n    print('>%s   Mean Score: %.6f (Score SD: %.6f)' % ('Tree Depth: ' + name, scores.mean(), scores.std()))\n# display model performance \nplt.figure(figsize=(10,5))\nplt.boxplot(results, labels=names, showmeans=True)\nplt.show()",
  "history_output" : "Home Directory: /Users/joe\nSample dimentions: (10000, 5)\nTraceback (most recent call last):\n  File \"/Users/joe/gw-workspace/1dbEvBAoKDJz/hyper_parameter_tuning.py\", line 15, in <module>\n    models = get_models_size()\nNameError: name 'get_models_size' is not defined\n",
  "history_begin_time" : 1717477052350,
  "history_end_time" : 1717477052832,
  "history_notes" : null,
  "history_process" : "4p0kit",
  "host_id" : null,
  "indicator" : "Failed"
},{
  "history_id" : "5pe08g3fv63",
  "history_input" : "\nimport os\n\nhome_directory = os.path.expanduser('~')\nprint(\"Home Directory:\", home_directory)\n# prepare data \ndata = pd.read_csv(f'{home_directory}/data/samples/sample_10K.csv', index_col = False)\nprint(\"Sample dimentions:\".format(), data.shape)\ndata.head()\nX = data[['blue','green','red','nir']]\ny = data['label']\n\n# customize models with different sample sizes\nmodels = get_models_size()\nresults, names = list(), list()\nfor name, model in models.items():\n    # evaluate models using k-fold cross-validation\n    scores = evaluate_model(model, X, y)\n    results.append(scores)\n    names.append(name)\n    # print the mean and standard deviation of models \n    print('>%s   Mean Score: %.6f (Score SD: %.6f)' % ('Sample size: ' + str(int(float(name) * 10000)), scores.mean(), scores.std()))\n    \n# display model performance \nplt.figure(figsize=(10,5))\nplt.boxplot(results, labels=names, showmeans=True)\nplt.show()\n\n# customize models with different model feature sizes\nmodels = get_models_feature()\n# evaluate the models and store results\nresults, names = list(), list()\nfor name, model in models.items():\n    # evaluate models using k-fold cross-validation\n    scores = evaluate_model(model, X, y)\n    results.append(scores)\n    names.append(name)\n    # print the mean and standard deviation of models \n    # print('>%s %.3f (%.3f)' % (name, scores.mean(), scores.std()))\n    print('>%s   Mean Score: %.6f (Score SD: %.6f)' % ('Features: ' + name, scores.mean(), scores.std()))\n# display model performance \nplt.boxplot(results, labels=names, showmeans=True)\nplt.show()\n\n# customize models with different tree numbers\nmodels = get_models_tree()\n# evaluate the models and store results\nresults, names = list(), list()\nfor name, model in models.items():\n    # evaluate models using k-fold cross-validation\n    scores = evaluate_model(model, X, y)\n    results.append(scores)\n    names.append(name)\n    # print the mean and standard deviation of models \n    # print('>%s %.3f (%.3f)' % (name, scores.mean(), scores.std()))\n    print('>%s   Mean Score: %.6f (Score SD: %.6f)' % ('Tree numbers: ' + name, scores.mean(), scores.std()))\n# display model performance \nplt.boxplot(results, labels=names, showmeans=True)\nplt.show()\n\n# customize models with different tree depths\nmodels = get_models_depth()\n# evaluate the models and store results\nresults, names = list(), list()\nfor name, model in models.items():\n     # evaluate models using k-fold cross-validation\n    scores = evaluate_model(model, X, y)\n    results.append(scores)\n    names.append(name)\n    # print the mean and standard deviation of models \n    # print('>%s %.3f (%.3f)' % (name, scores.mean(), scores.std()))\n    print('>%s   Mean Score: %.6f (Score SD: %.6f)' % ('Tree Depth: ' + name, scores.mean(), scores.std()))\n# display model performance \nplt.figure(figsize=(10,5))\nplt.boxplot(results, labels=names, showmeans=True)\nplt.show()",
  "history_output" : "Home Directory: /Users/joe\nTraceback (most recent call last):\n  File \"/Users/joe/gw-workspace/5pe08g3fv63/hyper_parameter_tuning.py\", line 7, in <module>\n    data = pd.read_csv(f'{home_directory}/data/samples/sample_10K.csv', index_col = False)\nNameError: name 'pd' is not defined\n",
  "history_begin_time" : 1717476911954,
  "history_end_time" : 1717476912040,
  "history_notes" : null,
  "history_process" : "4p0kit",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "2r26oq5yad6",
  "history_input" : "\nimport os\n\nhome_directory = os.path.expanduser('~')\nprint(\"Home Directory:\", home_directory)\n# prepare data \ndata = pd.read_csv(f'{home_directory}/data/samples/sample_10K.csv', index_col = False)\nprint(\"Sample dimentions:\".format(), data.shape)\ndata.head()\nX = data[['blue','green','red','nir']]\ny = data['label']\n\n# customize models with different sample sizes\nmodels = get_models_size()\nresults, names = list(), list()\nfor name, model in models.items():\n    # evaluate models using k-fold cross-validation\n    scores = evaluate_model(model, X, y)\n    results.append(scores)\n    names.append(name)\n    # print the mean and standard deviation of models \n    print('>%s   Mean Score: %.6f (Score SD: %.6f)' % ('Sample size: ' + str(int(float(name) * 10000)), scores.mean(), scores.std()))\n    \n# display model performance \nplt.figure(figsize=(10,5))\nplt.boxplot(results, labels=names, showmeans=True)\nplt.show()\n\n# customize models with different model feature sizes\nmodels = get_models_feature()\n# evaluate the models and store results\nresults, names = list(), list()\nfor name, model in models.items():\n    # evaluate models using k-fold cross-validation\n    scores = evaluate_model(model, X, y)\n    results.append(scores)\n    names.append(name)\n    # print the mean and standard deviation of models \n    # print('>%s %.3f (%.3f)' % (name, scores.mean(), scores.std()))\n    print('>%s   Mean Score: %.6f (Score SD: %.6f)' % ('Features: ' + name, scores.mean(), scores.std()))\n# display model performance \nplt.boxplot(results, labels=names, showmeans=True)\nplt.show()\n\n# customize models with different tree numbers\nmodels = get_models_tree()\n# evaluate the models and store results\nresults, names = list(), list()\nfor name, model in models.items():\n    # evaluate models using k-fold cross-validation\n    scores = evaluate_model(model, X, y)\n    results.append(scores)\n    names.append(name)\n    # print the mean and standard deviation of models \n    # print('>%s %.3f (%.3f)' % (name, scores.mean(), scores.std()))\n    print('>%s   Mean Score: %.6f (Score SD: %.6f)' % ('Tree numbers: ' + name, scores.mean(), scores.std()))\n# display model performance \nplt.boxplot(results, labels=names, showmeans=True)\nplt.show()\n\n# customize models with different tree depths\nmodels = get_models_depth()\n# evaluate the models and store results\nresults, names = list(), list()\nfor name, model in models.items():\n     # evaluate models using k-fold cross-validation\n    scores = evaluate_model(model, X, y)\n    results.append(scores)\n    names.append(name)\n    # print the mean and standard deviation of models \n    # print('>%s %.3f (%.3f)' % (name, scores.mean(), scores.std()))\n    print('>%s   Mean Score: %.6f (Score SD: %.6f)' % ('Tree Depth: ' + name, scores.mean(), scores.std()))\n# display model performance \nplt.figure(figsize=(10,5))\nplt.boxplot(results, labels=names, showmeans=True)\nplt.show()",
  "history_output" : "Home Directory: /Users/joe\nTraceback (most recent call last):\n  File \"/Users/joe/gw-workspace/2r26oq5yad6/hyper_parameter_tuning.py\", line 7, in <module>\n    data = pd.read_csv(f'{home_directory}/data/samples/sample_10K.csv', index_col = False)\nNameError: name 'pd' is not defined\n",
  "history_begin_time" : 1717460454893,
  "history_end_time" : 1717476813716,
  "history_notes" : null,
  "history_process" : "4p0kit",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "0lxfqnin4do",
  "history_input" : "\nimport os\n\nhome_directory = os.path.expanduser('~')\nprint(\"Home Directory:\", home_directory)\n# prepare data \ndata = pd.read_csv(f'{home_directory}/data/samples/sample_10K.csv', index_col = False)\nprint(\"Sample dimentions:\".format(), data.shape)\ndata.head()\nX = data[['blue','green','red','nir']]\ny = data['label']\n\n# customize models with different sample sizes\nmodels = get_models_size()\nresults, names = list(), list()\nfor name, model in models.items():\n    # evaluate models using k-fold cross-validation\n    scores = evaluate_model(model, X, y)\n    results.append(scores)\n    names.append(name)\n    # print the mean and standard deviation of models \n    print('>%s   Mean Score: %.6f (Score SD: %.6f)' % ('Sample size: ' + str(int(float(name) * 10000)), scores.mean(), scores.std()))\n    \n# display model performance \nplt.figure(figsize=(10,5))\nplt.boxplot(results, labels=names, showmeans=True)\nplt.show()\n\n# customize models with different model feature sizes\nmodels = get_models_feature()\n# evaluate the models and store results\nresults, names = list(), list()\nfor name, model in models.items():\n    # evaluate models using k-fold cross-validation\n    scores = evaluate_model(model, X, y)\n    results.append(scores)\n    names.append(name)\n    # print the mean and standard deviation of models \n    # print('>%s %.3f (%.3f)' % (name, scores.mean(), scores.std()))\n    print('>%s   Mean Score: %.6f (Score SD: %.6f)' % ('Features: ' + name, scores.mean(), scores.std()))\n# display model performance \nplt.boxplot(results, labels=names, showmeans=True)\nplt.show()\n\n# customize models with different tree numbers\nmodels = get_models_tree()\n# evaluate the models and store results\nresults, names = list(), list()\nfor name, model in models.items():\n    # evaluate models using k-fold cross-validation\n    scores = evaluate_model(model, X, y)\n    results.append(scores)\n    names.append(name)\n    # print the mean and standard deviation of models \n    # print('>%s %.3f (%.3f)' % (name, scores.mean(), scores.std()))\n    print('>%s   Mean Score: %.6f (Score SD: %.6f)' % ('Tree numbers: ' + name, scores.mean(), scores.std()))\n# display model performance \nplt.boxplot(results, labels=names, showmeans=True)\nplt.show()\n\n# customize models with different tree depths\nmodels = get_models_depth()\n# evaluate the models and store results\nresults, names = list(), list()\nfor name, model in models.items():\n     # evaluate models using k-fold cross-validation\n    scores = evaluate_model(model, X, y)\n    results.append(scores)\n    names.append(name)\n    # print the mean and standard deviation of models \n    # print('>%s %.3f (%.3f)' % (name, scores.mean(), scores.std()))\n    print('>%s   Mean Score: %.6f (Score SD: %.6f)' % ('Tree Depth: ' + name, scores.mean(), scores.std()))\n# display model performance \nplt.figure(figsize=(10,5))\nplt.boxplot(results, labels=names, showmeans=True)\nplt.show()",
  "history_output" : "Home Directory: /Users/joe\nTraceback (most recent call last):\n  File \"/Users/joe/gw-workspace/0lxfqnin4do/hyper_parameter_tuning.py\", line 7, in <module>\n    data = pd.read_csv(f'{home_directory}/data/samples/sample_10K.csv', index_col = False)\nNameError: name 'pd' is not defined\n",
  "history_begin_time" : 1717459887556,
  "history_end_time" : 1717459887649,
  "history_notes" : null,
  "history_process" : "4p0kit",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "024vmaructl",
  "history_input" : "# prepare data \ndata = pd.read_csv('./data/samples/sample_10K.csv', index_col = False)\nprint(\"Sample dimentions:\".format(), data.shape)\ndata.head()\nX = data[['blue','green','red','nir']]\ny = data['label']\n\n# customize models with different sample sizes\nmodels = get_models_size()\nresults, names = list(), list()\nfor name, model in models.items():\n    # evaluate models using k-fold cross-validation\n    scores = evaluate_model(model, X, y)\n    results.append(scores)\n    names.append(name)\n    # print the mean and standard deviation of models \n    print('>%s   Mean Score: %.6f (Score SD: %.6f)' % ('Sample size: ' + str(int(float(name) * 10000)), scores.mean(), scores.std()))\n    \n# display model performance \nplt.figure(figsize=(10,5))\nplt.boxplot(results, labels=names, showmeans=True)\nplt.show()\n\n# customize models with different model feature sizes\nmodels = get_models_feature()\n# evaluate the models and store results\nresults, names = list(), list()\nfor name, model in models.items():\n    # evaluate models using k-fold cross-validation\n    scores = evaluate_model(model, X, y)\n    results.append(scores)\n    names.append(name)\n    # print the mean and standard deviation of models \n    # print('>%s %.3f (%.3f)' % (name, scores.mean(), scores.std()))\n    print('>%s   Mean Score: %.6f (Score SD: %.6f)' % ('Features: ' + name, scores.mean(), scores.std()))\n# display model performance \nplt.boxplot(results, labels=names, showmeans=True)\nplt.show()\n\n# customize models with different tree numbers\nmodels = get_models_tree()\n# evaluate the models and store results\nresults, names = list(), list()\nfor name, model in models.items():\n    # evaluate models using k-fold cross-validation\n    scores = evaluate_model(model, X, y)\n    results.append(scores)\n    names.append(name)\n    # print the mean and standard deviation of models \n    # print('>%s %.3f (%.3f)' % (name, scores.mean(), scores.std()))\n    print('>%s   Mean Score: %.6f (Score SD: %.6f)' % ('Tree numbers: ' + name, scores.mean(), scores.std()))\n# display model performance \nplt.boxplot(results, labels=names, showmeans=True)\nplt.show()\n\n# customize models with different tree depths\nmodels = get_models_depth()\n# evaluate the models and store results\nresults, names = list(), list()\nfor name, model in models.items():\n     # evaluate models using k-fold cross-validation\n    scores = evaluate_model(model, X, y)\n    results.append(scores)\n    names.append(name)\n    # print the mean and standard deviation of models \n    # print('>%s %.3f (%.3f)' % (name, scores.mean(), scores.std()))\n    print('>%s   Mean Score: %.6f (Score SD: %.6f)' % ('Tree Depth: ' + name, scores.mean(), scores.std()))\n# display model performance \nplt.figure(figsize=(10,5))\nplt.boxplot(results, labels=names, showmeans=True)\nplt.show()",
  "history_output" : "Traceback (most recent call last):\n  File \"/Users/joe/gw-workspace/024vmaructl/hyper_parameter_tuning.py\", line 2, in <module>\n    data = pd.read_csv('./data/samples/sample_10K.csv', index_col = False)\nNameError: name 'pd' is not defined\n",
  "history_begin_time" : 1717395929489,
  "history_end_time" : 1717395929575,
  "history_notes" : null,
  "history_process" : "4p0kit",
  "host_id" : "100001",
  "indicator" : "Failed"
},{
  "history_id" : "ti44j98iw62",
  "history_input" : "# prepare data \ndata = pd.read_csv('./data/samples/sample_10K.csv', index_col = False)\nprint(\"Sample dimentions:\".format(), data.shape)\ndata.head()\nX = data[['blue','green','red','nir']]\ny = data['label']\n\n# customize models with different sample sizes\nmodels = get_models_size()\nresults, names = list(), list()\nfor name, model in models.items():\n    # evaluate models using k-fold cross-validation\n    scores = evaluate_model(model, X, y)\n    results.append(scores)\n    names.append(name)\n    # print the mean and standard deviation of models \n    print('>%s   Mean Score: %.6f (Score SD: %.6f)' % ('Sample size: ' + str(int(float(name) * 10000)), scores.mean(), scores.std()))\n    \n# display model performance \nplt.figure(figsize=(10,5))\nplt.boxplot(results, labels=names, showmeans=True)\nplt.show()\n\n# customize models with different model feature sizes\nmodels = get_models_feature()\n# evaluate the models and store results\nresults, names = list(), list()\nfor name, model in models.items():\n    # evaluate models using k-fold cross-validation\n    scores = evaluate_model(model, X, y)\n    results.append(scores)\n    names.append(name)\n    # print the mean and standard deviation of models \n    # print('>%s %.3f (%.3f)' % (name, scores.mean(), scores.std()))\n    print('>%s   Mean Score: %.6f (Score SD: %.6f)' % ('Features: ' + name, scores.mean(), scores.std()))\n# display model performance \nplt.boxplot(results, labels=names, showmeans=True)\nplt.show()\n\n# customize models with different tree numbers\nmodels = get_models_tree()\n# evaluate the models and store results\nresults, names = list(), list()\nfor name, model in models.items():\n    # evaluate models using k-fold cross-validation\n    scores = evaluate_model(model, X, y)\n    results.append(scores)\n    names.append(name)\n    # print the mean and standard deviation of models \n    # print('>%s %.3f (%.3f)' % (name, scores.mean(), scores.std()))\n    print('>%s   Mean Score: %.6f (Score SD: %.6f)' % ('Tree numbers: ' + name, scores.mean(), scores.std()))\n# display model performance \nplt.boxplot(results, labels=names, showmeans=True)\nplt.show()\n\n# customize models with different tree depths\nmodels = get_models_depth()\n# evaluate the models and store results\nresults, names = list(), list()\nfor name, model in models.items():\n     # evaluate models using k-fold cross-validation\n    scores = evaluate_model(model, X, y)\n    results.append(scores)\n    names.append(name)\n    # print the mean and standard deviation of models \n    # print('>%s %.3f (%.3f)' % (name, scores.mean(), scores.std()))\n    print('>%s   Mean Score: %.6f (Score SD: %.6f)' % ('Tree Depth: ' + name, scores.mean(), scores.std()))\n# display model performance \nplt.figure(figsize=(10,5))\nplt.boxplot(results, labels=names, showmeans=True)\nplt.show()",
  "history_output" : "Traceback (most recent call last):\n  File \"hyper_parameter_tuning.py\", line 2, in <module>\n    data = pd.read_csv('./data/samples/sample_10K.csv', index_col = False)\nNameError: name 'pd' is not defined\n",
  "history_begin_time" : 1679029194804,
  "history_end_time" : 1679029195129,
  "history_notes" : null,
  "history_process" : "4p0kit",
  "host_id" : "efrbpv",
  "indicator" : "Done"
},{
  "history_id" : "9x1h7ix7258",
  "history_input" : "# prepare data \ndata = pd.read_csv('./data/samples/sample_10K.csv', index_col = False)\nprint(\"Sample dimentions:\".format(), data.shape)\ndata.head()\nX = data[['blue','green','red','nir']]\ny = data['label']\n\n# customize models with different sample sizes\nmodels = get_models_size()\nresults, names = list(), list()\nfor name, model in models.items():\n    # evaluate models using k-fold cross-validation\n    scores = evaluate_model(model, X, y)\n    results.append(scores)\n    names.append(name)\n    # print the mean and standard deviation of models \n    print('>%s   Mean Score: %.6f (Score SD: %.6f)' % ('Sample size: ' + str(int(float(name) * 10000)), scores.mean(), scores.std()))\n    \n# display model performance \nplt.figure(figsize=(10,5))\nplt.boxplot(results, labels=names, showmeans=True)\nplt.show()\n\n# customize models with different model feature sizes\nmodels = get_models_feature()\n# evaluate the models and store results\nresults, names = list(), list()\nfor name, model in models.items():\n    # evaluate models using k-fold cross-validation\n    scores = evaluate_model(model, X, y)\n    results.append(scores)\n    names.append(name)\n    # print the mean and standard deviation of models \n    # print('>%s %.3f (%.3f)' % (name, scores.mean(), scores.std()))\n    print('>%s   Mean Score: %.6f (Score SD: %.6f)' % ('Features: ' + name, scores.mean(), scores.std()))\n# display model performance \nplt.boxplot(results, labels=names, showmeans=True)\nplt.show()\n\n# customize models with different tree numbers\nmodels = get_models_tree()\n# evaluate the models and store results\nresults, names = list(), list()\nfor name, model in models.items():\n    # evaluate models using k-fold cross-validation\n    scores = evaluate_model(model, X, y)\n    results.append(scores)\n    names.append(name)\n    # print the mean and standard deviation of models \n    # print('>%s %.3f (%.3f)' % (name, scores.mean(), scores.std()))\n    print('>%s   Mean Score: %.6f (Score SD: %.6f)' % ('Tree numbers: ' + name, scores.mean(), scores.std()))\n# display model performance \nplt.boxplot(results, labels=names, showmeans=True)\nplt.show()\n\n# customize models with different tree depths\nmodels = get_models_depth()\n# evaluate the models and store results\nresults, names = list(), list()\nfor name, model in models.items():\n     # evaluate models using k-fold cross-validation\n    scores = evaluate_model(model, X, y)\n    results.append(scores)\n    names.append(name)\n    # print the mean and standard deviation of models \n    # print('>%s %.3f (%.3f)' % (name, scores.mean(), scores.std()))\n    print('>%s   Mean Score: %.6f (Score SD: %.6f)' % ('Tree Depth: ' + name, scores.mean(), scores.std()))\n# display model performance \nplt.figure(figsize=(10,5))\nplt.boxplot(results, labels=names, showmeans=True)\nplt.show()",
  "history_output" : "Traceback (most recent call last):\n  File \"hyper_parameter_tuning.py\", line 2, in <module>\n    data = pd.read_csv('./data/samples/sample_10K.csv', index_col = False)\nNameError: name 'pd' is not defined\n",
  "history_begin_time" : 1679029165952,
  "history_end_time" : 1679029167026,
  "history_notes" : null,
  "history_process" : "4p0kit",
  "host_id" : "efrbpv",
  "indicator" : "Failed"
},{
  "history_id" : "itrqw7zvrl8",
  "history_input" : "# prepare data \ndata = pd.read_csv('./data/samples/sample_10K.csv', index_col = False)\nprint(\"Sample dimentions:\".format(), data.shape)\ndata.head()\nX = data[['blue','green','red','nir']]\ny = data['label']\n\n# customize models with different sample sizes\nmodels = get_models_size()\nresults, names = list(), list()\nfor name, model in models.items():\n    # evaluate models using k-fold cross-validation\n    scores = evaluate_model(model, X, y)\n    results.append(scores)\n    names.append(name)\n    # print the mean and standard deviation of models \n    print('>%s   Mean Score: %.6f (Score SD: %.6f)' % ('Sample size: ' + str(int(float(name) * 10000)), scores.mean(), scores.std()))\n    \n# display model performance \nplt.figure(figsize=(10,5))\nplt.boxplot(results, labels=names, showmeans=True)\nplt.show()\n\n# customize models with different model feature sizes\nmodels = get_models_feature()\n# evaluate the models and store results\nresults, names = list(), list()\nfor name, model in models.items():\n    # evaluate models using k-fold cross-validation\n    scores = evaluate_model(model, X, y)\n    results.append(scores)\n    names.append(name)\n    # print the mean and standard deviation of models \n    # print('>%s %.3f (%.3f)' % (name, scores.mean(), scores.std()))\n    print('>%s   Mean Score: %.6f (Score SD: %.6f)' % ('Features: ' + name, scores.mean(), scores.std()))\n# display model performance \nplt.boxplot(results, labels=names, showmeans=True)\nplt.show()\n\n# customize models with different tree numbers\nmodels = get_models_tree()\n# evaluate the models and store results\nresults, names = list(), list()\nfor name, model in models.items():\n    # evaluate models using k-fold cross-validation\n    scores = evaluate_model(model, X, y)\n    results.append(scores)\n    names.append(name)\n    # print the mean and standard deviation of models \n    # print('>%s %.3f (%.3f)' % (name, scores.mean(), scores.std()))\n    print('>%s   Mean Score: %.6f (Score SD: %.6f)' % ('Tree numbers: ' + name, scores.mean(), scores.std()))\n# display model performance \nplt.boxplot(results, labels=names, showmeans=True)\nplt.show()\n\n# customize models with different tree depths\nmodels = get_models_depth()\n# evaluate the models and store results\nresults, names = list(), list()\nfor name, model in models.items():\n     # evaluate models using k-fold cross-validation\n    scores = evaluate_model(model, X, y)\n    results.append(scores)\n    names.append(name)\n    # print the mean and standard deviation of models \n    # print('>%s %.3f (%.3f)' % (name, scores.mean(), scores.std()))\n    print('>%s   Mean Score: %.6f (Score SD: %.6f)' % ('Tree Depth: ' + name, scores.mean(), scores.std()))\n# display model performance \nplt.figure(figsize=(10,5))\nplt.boxplot(results, labels=names, showmeans=True)\nplt.show()",
  "history_output" : "Traceback (most recent call last):\n  File \"hyper_parameter_tuning.py\", line 2, in <module>\n    data = pd.read_csv('./data/samples/sample_10K.csv', index_col = False)\n",
  "history_begin_time" : 1679029025579,
  "history_end_time" : 1679029026866,
  "history_notes" : null,
  "history_process" : "4p0kit",
  "host_id" : "efrbpv",
  "indicator" : "Failed"
},{
  "history_id" : "v5jxvkkyuh2",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1717395177740,
  "history_notes" : null,
  "history_process" : "4p0kit",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "45aoec6dnxm",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1717395607497,
  "history_notes" : null,
  "history_process" : "4p0kit",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "cremoc4x8zh",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1717395658713,
  "history_notes" : null,
  "history_process" : "4p0kit",
  "host_id" : "100001",
  "indicator" : "Stopped"
},{
  "history_id" : "qmerwny0770",
  "history_input" : null,
  "history_output" : null,
  "history_begin_time" : null,
  "history_end_time" : 1717396051700,
  "history_notes" : null,
  "history_process" : "4p0kit",
  "host_id" : "100001",
  "indicator" : "Stopped"
},]
